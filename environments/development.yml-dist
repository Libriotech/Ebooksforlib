# configuration file for development environment

# Base url for the reader. Do not include trailing slash. 
reader_url: http://reader.example.org

# the logger engine to use
# console: log messages to STDOUT (your console where you started the
#          application server)
# file:    log message to a file in log/
logger: "console"

# the log level for this environment
# core is the lowest, it shows Dancer's core log messages as well as yours
# (debug, info, warning and error)
log: "core"

# should Dancer consider warnings as critical errors?
warnings: 1

# should Dancer show a stacktrace when an error is caught?
show_errors: 1

# auto_reload is a development and experimental feature
# you should enable it by yourself if you want it
# Module::Refresh is needed 
# 
# Be aware it's unstable and may cause a memory leak.
# DO NOT EVER USE THIS FEATURE IN PRODUCTION 
# OR TINY KITTENS SHALL DIE WITH LOTS OF SUFFERING
auto_reload: 0

# Minimum password length
min_pass: 4

# Max number of failed logins before a user is blocked from logging in
max_failed_logins: 5

# This setting determins what to do if a search returns 1 hit (either one title
# or one person). 
# 0 = display the one hit as a result list
# 1 = redirect directly to the one hit (be it a book or an author)
one_hit_redirect: 0

# Should users be asked to confirm before they can toggle their setting for 
# anonymization as well as when they anonymize a single loan? 
# - If this is set to 0 they will not be asked for confirmation. 
# - If it is set to 1 they will get a screen saying "Are you sure you want to 
#   do this? Yes/No"
toggle_anon_confirm: 1

# List IPs that should have access to the REST API
rest_allowed_ips:
    127.0.0.1: 1

date_format: "%d-%b-%Y %H:%M:%S"
locale: "en_US"
time_zone: 'Europe/Oslo'

# The root directory where books are stored. This directory should contain 
# numbered subfolders, one for each book. Include trailing slash. 
books_root: '/path/to/directory/'

session: YAML
session_dir: "/tmp/ebooksforlib-sessions"

# SPARQL endpoint that we can fetch bibliographic and other data from 
# It is assumed that this endpoint is populated by https://github.com/digibib/marc2rdf
# or something similar. The present software is hardcoded to use the properties
# used by marc2rdf. 
sparql_endpoint: http://data.example.org/sparql

# Config options for SIP2 auth providers, with examples:
# host: 127.0.0.1:1965
# If the server needs a login before it will talk to clients:
# username: term1
# password: term1
# If the server does not provide the BL and CQ fields to indicate valid 
# usernames and passwords, look for the given string in the AF field:
# auth_denied: 'ikke akseptert'

# Config options for talking to "Nasjonalt l√•nekort"
laanekort_username: "x"
laanekort_password: "y"

plugins:
    Email:
        transport:
            SMTP:
                ssl: 1
                host: 'smtp.gmail.com'
                port: 465
                sasl_username: 'example@example.com'
                sasl_password: 'example'
    EscapeHTML:
        automatic_escaping: 1
    Auth::Extensible:
        realms:
            storevik:
                provider: 'SIP2'
                host: 127.0.0.1:6001
                username: term1
                password: term1
            local:
                provider: 'Database'
                disable_roles: 0
                no_default_pages: 0
    DBIC:
        default:
            dsn:  dbi:mysql:ebok
            schema_class: Ebooksforlib::Schema
            user: ebok
            pass: pass
            options:
                RaiseError: 1
                PrintError: 1
                mysql_enable_utf8: 1
    Database:
        driver: 'mysql'
        database: 'ebok'
        host: 'localhost'
        port: 3306
        username: 'ebok'
        password: 'pass'
        connection_check_threshold: 10
        dbi_params:
            RaiseError: 1
            AutoCommit: 1
        on_connect_do: ["SET NAMES 'utf8'", "SET CHARACTER SET 'utf8'" ]
        log_queries: 1
